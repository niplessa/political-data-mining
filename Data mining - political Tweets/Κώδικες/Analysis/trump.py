# -*- coding: utf-8 -*-
"""trump.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1af9eqV5gJasugIMR1Ek3l4ayur6SHjPw

**imports**
"""

import numpy as np
import pandas as pd
pd.set_option('display.max_rows', 40000)
pd.set_option('display.max_columns', 600)
pd.set_option('display.width', 3000)

import  matplotlib.pyplot as plt
from wordcloud import WordCloud

import nltk
nltk.download('stopwords')
nltk.download('punkt')
nltk.download('wordnet')
from nltk.corpus import stopwords
from nltk import word_tokenize
from nltk.tokenize import regexp_tokenize 
from string import punctuation
from nltk.stem import WordNetLemmatizer 

from sklearn.feature_extraction import text
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.cluster import KMeans

import re

import string
from string import punctuation

stopwords = stopwords.words('english')

#mount google drive
from google.colab import drive
drive.mount('/content/drive')

"""**create dataframe for bernie's tweets**"""

path = '/content/drive/My Drive/datasets/trump.csv'
df_trump = pd.read_csv(path)
#drop duplicate articles on original df_trumpset
df_trump.drop_duplicates(subset="text",keep = "first", inplace = True)
print("Total retrieved articles: ",df_trump.shape[0])
print(df_trump.shape)
df_trump.head()

"""**text preproccess**"""

df_trump['text']=df_trump['text'].astype('str')

#make all text lowercase
df_trump['clean_text'] = df_trump['text'].str.lower()

#remove words < 2 chars
df_trump['clean_text'] = df_trump['clean_text'].apply(lambda x: ' '.join([w for w in x.split() if len(w)>2]))

#remove links with regex
p=re.compile('(www|http)\S+')
df_trump['clean_text'] = df_trump['clean_text'].apply(lambda x: re.sub(p,' ',x))
#remove @
df_trump['clean_text'] = df_trump['clean_text'].apply(lambda x: re.sub('@','',x))

#remove punctuation

#remove stopwords function
stops =  list(stopwords) + list(punctuation)

def remove_stops(text):
    text_no_stops = []
    for i in text:
        if i not in stops:
            if len(i) == 1:
                pass
            else:
                text_no_stops.append(i)
        else:
            pass
    return text_no_stops

#tokenize
df_trump['text_tokenized'] = df_trump['clean_text'].apply(lambda x: regexp_tokenize(x,"[\w']+"))

#actually remove stopwords
df_trump['text_tokenized'] = df_trump['text_tokenized'].apply(lambda x: remove_stops(x))

#lematization function
lemmatizer = nltk.stem.WordNetLemmatizer()
def lemmatize_text(text):
    lemmatized = []
    for word in text:
        lemmatized.append(lemmatizer.lemmatize(word))
    return lemmatized

#lemmatize
df_trump['text_lemma'] = df_trump['text_tokenized'].apply(lemmatize_text)

#create a string from lemmatized words
df_trump['lemmatized_string'] = df_trump['text_lemma'].apply(lambda x: ' '.join(x))

#check the dataframe
df_trump.head()

# tfidf vectorizer of scikit learn

vectorizer = TfidfVectorizer(stop_words=stopwords,use_idf = True, ngram_range=(1,2))
#vectorize lemmatized tweets
X = vectorizer.fit_transform(df_trump['lemmatized_string'])
terms = vectorizer.get_feature_names()

df_trump.head()

"""**K-MEANS clustering**

**find best K by using elbow rule**
"""

'''distortions = []
    K = range(150,160)
    for k in K:
        km = KMeans(n_clusters=k)
        km.fit(X)
        distortions.append(km.inertia_)'''

''' plt.figure(figsize=(16,8))
    plt.plot(K, distortions, 'bx-')
    plt.xlabel('k')
    plt.ylabel('Distortion')
    plt.title('The Elbow Method showing the optimal k')
    plt.show()'''

df_trump.head()

#K-means clustering
num_clusters = 40
km = KMeans(n_clusters=num_clusters,init='k-means++')
labels = km.fit_predict(X)

print("K-means clustering: \n")
asc_order_centroids = km.cluster_centers_.argsort()#[:, ::-1]
order_centroids = asc_order_centroids[:,::-1]
terms = vectorizer.get_feature_names()
for i in range(num_clusters):
    print ("Cluster %d:" % i)
    for ind in order_centroids[i, :10]:
        print (' %s' % terms[ind])
    print('\n')

#add cluster label to dataframe
df_trump['cluster'] = labels

df_trump.head()

"""**plot cluster size**"""

import seaborn as sns
sns.set(rc={'figure.figsize':(13,9)})
plt.style.use('fivethirtyeight')

ax = sns.countplot(x= 'cluster', data=df_trump)
ax.set_xticklabels(ax.get_xticklabels(), rotation=45)
plt.show()

"""**plot the clusters**"""

from sklearn.metrics.pairwise import cosine_similarity
dist = 1 - cosine_similarity(X)

"""**sentiment analysis**"""

from textblob import TextBlob

def analyze_sentiment(text):
    analysis = TextBlob(text)
    #return  analysis.sentiment.polarity
    
    if analysis.sentiment.polarity > 0:
        return "positive"
    elif analysis.sentiment.polarity == 0:
        return "neutral"
    else:
        return "negative"

df_trump['sentiment'] = np.array([ analyze_sentiment(tweet) for tweet in df_trump['lemmatized_string'] ])

df_trump.head()

"""**persentage of positive/negative/neutral tweets**"""

ax = sns.countplot(x= 'sentiment', data=df_trump,palette='coolwarm').set_title("Trump's tweets sentiment")
plt.show()

"""**find popular hashtags**"""

#create new df hashtags
hashtags = df_trump["text"].str.extractall(r'(\#\w+)')[0].value_counts().reset_index()

hashtags.columns=['tag','count']

ax = sns.barplot(x = "count" , y = "tag" ,
                 data = hashtags[:25] , palette = "seismic",
                 linewidth = 1 , edgecolor = "k")
plt.grid(True)
for i,j in enumerate(hashtags["count"][:25].values) :
    ax.text(3,i,j,fontsize = 10,color = "white")
plt.title("25 more popular hashtags used by Donald Trump")

"""**popular account handlers used**"""

#create new df accounts
accounts = df_trump["text"].str.extractall(r'(\@\w+)')[0].value_counts().reset_index()

accounts.columns=['username','count']

ax = sns.barplot(x = "count" , y = "username" ,
                 data = accounts[:25] , palette = "seismic",
                 linewidth = 1 , edgecolor = "k")
plt.grid(True)
for i,j in enumerate(accounts["count"][:25].values) :
    ax.text(3,i,j,fontsize = 10,color = "white")
plt.title("25 more popular usernames mentioned by Donald Trump")

"""**network analysis**"""

from sklearn.feature_extraction.text import CountVectorizer
import networkx as nx

def network_tweets(df,frequency,color,title) :
    #documents
    documents  = df["lemmatized_string"].tolist()
    vectorizer = CountVectorizer()
    vec        = vectorizer.fit_transform(documents)
    vec_t      = vectorizer.fit_transform(documents).transpose()
    
    #adjecency matrix for words
    adj_mat    = pd.DataFrame((vec_t * vec).toarray(),
                              columns = vectorizer.get_feature_names(),
                              index    = vectorizer.get_feature_names()
                             )
    # #stacking combinations
    adj_mat_stack   = adj_mat.stack().reset_index()
    adj_mat_stack.columns = ["link_1","link_2","count"]
    
    #drop same word combinations
    adj_mat_stack   = adj_mat_stack[adj_mat_stack["link_1"] !=
                                    adj_mat_stack["link_2"]] 
    
    #subset dataframe with combination count greater than x times
    network_sub = adj_mat_stack[adj_mat_stack["count"] > frequency]
    
    #plot network
    H = nx.from_pandas_edgelist(network_sub,"link_1","link_2",["count"],
                                create_using = nx.DiGraph())

    ax = plt.figure(figsize = (18,18))
    nx.draw(H,with_labels = True,alpha = .7,node_shape = "H",
            width = 1,node_color = color,
            font_weight = "bold",style = "solid", arrowsize = 15 ,
            font_color = "white",linewidths = 10,edge_color = "grey",
            node_size = 1300,pos = nx.kamada_kawai_layout(H))
    plt.title(title,color = "white")
    ax.set_facecolor("k")

network_tweets(df_trump,80,"#FF3300","Network analysis of tweet words - Donald Trump")

"""**tweets per year plot**"""

#create column year
df_trump['year'] = df_trump['date'].apply(lambda buf: int(buf[:4]))

sns.countplot(x='year',data=df_trump,).set_title("Trump's tweets per year")

"""**WordCloud Generation**"""

dummy = df_trump[df_trump['cluster']==11]

text = df_trump.lemmatized_string

wordcloud = WordCloud(
    width = 2000,
    height = 1000,
    background_color = 'orange',
    stopwords = stopwords).generate(str(text))
fig = plt.figure(
    figsize = (30, 20),
    facecolor = 'k',
    edgecolor = 'k')
plt.imshow(wordcloud, interpolation = 'bilinear')
plt.axis('off')
plt.tight_layout(pad=0)
plt.show()

"""**tweets about bernie**"""

keywords = ['bernie','sanders']
bernie = pd.DataFrame()

for k in keywords :
  tmp = df_trump[df_trump['text'].str.lower().str.contains(k)]
  bernie = bernie.append(tmp)

bernie = bernie.reset_index(drop=True)

bernie.drop("cluster", axis=1, inplace=True)

bernie.shape

ax = sns.countplot(x= 'sentiment', data=bernie)
ax.set_xticklabels(ax.get_xticklabels(), rotation=45)
plt.show()

network_tweets(bernie,10,"#FF3300","Network analysis of tweet words - Trump -> Sanders")

vectorizer = TfidfVectorizer(stop_words=stopwords,max_features=10000, max_df = 0.5, use_idf = True, ngram_range=(1,2))
Y = vectorizer.fit_transform(bernie['lemmatized_string'])

num_clusters = 3
km = KMeans(n_clusters=num_clusters,init='k-means++')
labels = km.fit_predict(Y)
bernie['cluster'] = labels

print("K-means clustering: \n")
asc_order_centroids = km.cluster_centers_.argsort()#[:, ::-1]
order_centroids = asc_order_centroids[:,::-1]
terms = vectorizer.get_feature_names()
for i in range(num_clusters):
    print ("Cluster %d:" % i)
    for ind in order_centroids[i, :10]:
        print (' %s' % terms[ind])
    print('\n')

import umap
clusters = km.labels_.tolist()
embedding = umap.UMAP(n_neighbors=100, min_dist=0.5, random_state=12).fit_transform(X)

plt.figure(figsize=(7,5))
plt.scatter(embedding[:, 0], embedding[:, 1], 
c = clusters,
s = 10, # size
edgecolor='none')
plt.show()